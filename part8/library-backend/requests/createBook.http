POST http://localhost:4000 HTTP/1.1
Content-Type: application/json
X-Request-Type: GraphQL

query {
  allBooks {
    title
    author {
      id
      name
      born
    }
    published
    genres
  }
}

###

# @name login

POST http://localhost:4000 HTTP/1.1
Content-Type: application/json
X-Request-Type: GraphQL

mutation login($username: String!, $password: String!) {
  login(username: $username, password: $password) {
    value
  }
}

{
  "username": "mluukkai",
  "password": "secret"
}

###

@authToken = {{login.response.body.data.login.value}}

POST http://localhost:4000 HTTP/1.1
Content-Type: application/json
Authorization: bearer {{authToken}}
X-Request-Type: GraphQL

mutation createBook($title: String!, $author: String!, $published: Int!, $genres: [String!]!) {
  addBook(title: $title, author: $author, published: $published, genres: $genres) {
    title
    author {
      name
      born
    }
    published
  }
}

{
  "title": "Clean Code",
  "published": 2008,
  "author": "Robert Martin",
  "genres": ["refactoring"]
}

###

POST http://localhost:4000 HTTP/1.1
Content-Type: application/json
Authorization: bearer {{authToken}}
X-Request-Type: GraphQL

mutation createBook($title: String!, $author: String!, $published: Int!, $genres: [String!]!) {
  addBook(title: $title, author: $author, published: $published, genres: $genres) {
    title
    author {
      name
      born
    }
    published
  }
}

{
  "title": "Agile software development",
  "published": 2002,
  "author": "Robert Martin",
  "genres": ["agile", "patterns", "design"]
}

###

POST http://localhost:4000 HTTP/1.1
Content-Type: application/json
Authorization: bearer {{authToken}}
X-Request-Type: GraphQL

mutation createBook($title: String!, $author: String!, $published: Int!, $genres: [String!]!) {
  addBook(title: $title, author: $author, published: $published, genres: $genres) {
    title
    author {
      name
      born
    }
    published
  }
}

{
  "title": "Refactoring, edition 2",
  "published": 2018,
  "author": "Martin Fowler",
  "genres": ["refactoring"]
}

###

POST http://localhost:4000 HTTP/1.1
Content-Type: application/json
Authorization: bearer {{authToken}}
X-Request-Type: GraphQL

mutation createBook($title: String!, $author: String!, $published: Int!, $genres: [String!]!) {
  addBook(title: $title, author: $author, published: $published, genres: $genres) {
    title
    author {
      name
      born
    }
    published
  }
}

{
  "title": "Refactoring to patterns",
  "published": 2008,
  "author": "Joshua Kerievsky",
  "genres": ["refactoring", "patterns"]
}

###

POST http://localhost:4000 HTTP/1.1
Content-Type: application/json
Authorization: bearer {{authToken}}
X-Request-Type: GraphQL

mutation createBook($title: String!, $author: String!, $published: Int!, $genres: [String!]!) {
  addBook(title: $title, author: $author, published: $published, genres: $genres) {
    title
    author {
      name
      born
    }
    published
  }
}

{
  "title": "Practical Object-Oriented Design, An Agile Primer Using Ruby",
  "published": 2012,
  "author": "Sandi Metz",
  "genres": ["refactoring", "design"]
}

###

POST http://localhost:4000 HTTP/1.1
Content-Type: application/json
Authorization: bearer {{authToken}}
X-Request-Type: GraphQL

mutation createBook($title: String!, $author: String!, $published: Int!, $genres: [String!]!) {
  addBook(title: $title, author: $author, published: $published, genres: $genres) {
    title
    author {
      name
      born
    }
    published
  }
}

{
  "title": "Crime and punishment",
  "published": 1866,
  "author": "Fyodor Dostoevsky",
  "genres": ["classic", "crime"]
}

###

POST http://localhost:4000 HTTP/1.1
Content-Type: application/json
Authorization: bearer {{authToken}}
X-Request-Type: GraphQL

mutation createBook($title: String!, $author: String!, $published: Int!, $genres: [String!]!) {
  addBook(title: $title, author: $author, published: $published, genres: $genres) {
    title
    author {
      name
      born
    }
    published
  }
}

{
  "title": "The Demon",
  "published": 1872,
  "author": "Fyodor Dostoevsky",
  "genres": ["classic", "revolution"]
}
